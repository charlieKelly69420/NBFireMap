name: Sentinel-2 weekly COGs (Saint John 10km)

on:
  schedule:
    # Every Monday at 06:00 UTC
    - cron: "0 6 * * MON"
  workflow_dispatch: {}

permissions:
  contents: write

env:
  AOI_NAME: "SaintJohn10km_CA"
  # 10x10 km square around Saint John, NB
  NB_BBOX: "-66.124,45.225,-65.996,45.315"
  START_DATE: "2025-03-01"
  STAC_URL: "https://earth-search.aws.element84.com/v1"
  MAX_SCENE_CLOUD: "70"
  TARGET_EPSG: "3857"
  OUT_DIR: "cogs"
  VISIBLE_BANDS: "B04,B03,B02"

jobs:
  build-cogs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install \
            numpy==1.26.* \
            pandas==2.2.* \
            xarray==2024.* \
            rioxarray==0.15.* \
            rasterio==1.3.* \
            rio-cogeo==5.* \
            pystac-client==0.7.* \
            stackstac==0.5.* \
            shapely==2.* \
            pyproj==3.*

      - name: Create processor script
        run: |
          mkdir -p scripts "${OUT_DIR}"
          cat > scripts/process_weeks.py << 'PYCODE'
          import os, sys, datetime as dt
          from pathlib import Path
          import numpy as np
          import rasterio as rio
          from rasterio.io import MemoryFile
          from rio_cogeo.cogeo import cog_translate
          from rio_cogeo.profiles import cog_profiles
          from pystac_client import Client
          import stackstac
          import xarray as xr
          import rioxarray  # noqa: F401

          STAC_URL = os.environ["STAC_URL"]
          VISIBLE_BANDS = os.environ["VISIBLE_BANDS"].split(",")
          MAX_SCENE_CLOUD = float(os.environ.get("MAX_SCENE_CLOUD", "70"))
          OUT_DIR = Path(os.environ["OUT_DIR"])
          AOI_NAME = os.environ["AOI_NAME"]
          TARGET_EPSG = int(os.environ["TARGET_EPSG"])
          NB_BBOX = [float(v) for v in os.environ["NB_BBOX"].split(",")]
          START_DATE = dt.date.fromisoformat(os.environ["START_DATE"])

          def iso_week_label(d: dt.date):
              iso = d.isocalendar()
              return f"{iso.year}-W{iso.week:02d}"

          today = dt.datetime.utcnow().date()
          last_sunday = today - dt.timedelta(days=(today.weekday() + 1) % 7)
          start_monday = START_DATE - dt.timedelta(days=START_DATE.weekday())
          weeks = []
          cur = start_monday
          while cur <= last_sunday - dt.timedelta(days=6):
              weeks.append((cur, cur + dt.timedelta(days=6)))
              cur += dt.timedelta(days=7)

          if not weeks:
              print("No complete weeks to process")
              sys.exit(0)

          OUT_DIR.mkdir(parents=True, exist_ok=True)
          client = Client.open(STAC_URL)
          cog_profile = cog_profiles.get("deflate")
          cog_profile.update(dict(BLOCKSIZE=512, BIGTIFF="IF_SAFER"))

          def build_weekly_visible_cog(wk_start, wk_end, out_path):
              search = client.search(
                  collections=["sentinel-2-l2a"],
                  bbox=NB_BBOX,
                  datetime=f"{wk_start}T00:00:00Z/{wk_end+dt.timedelta(days=1)}T00:00:00Z",
                  query={"eo:cloud_cover": {"lt": MAX_SCENE_CLOUD}},
              )
              items = list(search.items())
              if not items:
                  return None

              arr = stackstac.stack(
                  items,
                  assets=VISIBLE_BANDS + ["data_mask"],
                  epsg=TARGET_EPSG,
                  resolution=10,
                  bounds=NB_BBOX,
                  bounds_latlon=True,
                  fill_value=np.nan,
                  dtype="float32",
                  chunksize=1024,
              )

              band_index = {b: i for i, b in enumerate(arr["band"].values)}
              dm = arr.isel(band=band_index["data_mask"])
              rgb = arr.isel(band=[band_index[b] for b in VISIBLE_BANDS])

              rgb = rgb.where(dm > 0.5)
              comp = rgb.median(dim="time", skipna=True).transpose("band", "y", "x")

              scaled = (np.clip(comp.values, 0.0, 1.0) * 10000).astype("uint16")
              height, width = scaled.shape[-2], scaled.shape[-1]
              transform = comp.rio.transform()
              crs = comp.rio.crs

              with MemoryFile() as mem:
                  with mem.open(
                      driver="GTiff",
                      height=height,
                      width=width,
                      count=3,
                      dtype="uint16",
                      crs=crs,
                      transform=transform,
                      nodata=0,
                  ) as dst:
                      for i in range(3):
                          dst.write(scaled[i, :, :], i + 1)
                      dst.set_band_description(1, "red")
                      dst.set_band_description(2, "green")
                      dst.set_band_description(3, "blue")

                  mem.seek(0)
                  cog_translate(mem, out_path, cog_profile, in_memory=False, quiet=True)
              return out_path

          def build_change_cog(curr_path, prev_path, out_path):
              if not prev_path.exists():
                  return None
              with rio.open(curr_path) as cur, rio.open(prev_path) as prv:
                  if (prv.crs != cur.crs) or (prv.transform != cur.transform):
                      data_prev = np.zeros((3, cur.height, cur.width), dtype=np.float32)
                      for i in range(1, 4):
                          rio.warp.reproject(
                              source=rio.band(prv, i),
                              destination=data_prev[i-1],
                              src_transform=prv.transform,
                              src_crs=prv.crs,
                              dst_transform=cur.transform,
                              dst_crs=cur.crs,
                              resampling=rio.enums.Resampling.bilinear,
                          )
                  else:
                      data_prev = prv.read(out_dtype=np.float32)

                  data_cur = cur.read(out_dtype=np.float32)
                  cur_ref = np.clip(data_cur / 10000, 0, 1)
                  prv_ref = np.clip(data_prev / 10000, 0, 1)
                  diff = np.sqrt(((cur_ref - prv_ref)**2).sum(axis=0)).astype("float32")
                  diff_u16 = np.clip((diff / np.sqrt(3)) * 10000, 0, 10000).astype("uint16")

                  with MemoryFile() as mem:
                      with mem.open(
                          driver="GTiff",
                          height=cur.height,
                          width=cur.width,
                          count=1,
                          dtype="uint16",
                          crs=cur.crs,
                          transform=cur.transform,
                          nodata=0,
                      ) as dst:
                          dst.write(diff_u16, 1)
                          dst.set_band_description(1, "rgb_change_magnitude")

                      mem.seek(0)
                      cog_translate(mem, out_path, cog_profile, in_memory=False, quiet=True)
              return out_path

          produced = 0
          for wk_start, wk_end in sorted(weeks):
              label = iso_week_label(wk_start)
              week_dir = OUT_DIR / label
              week_dir.mkdir(parents=True, exist_ok=True)
              vis_path = week_dir / f"{AOI_NAME}_{label}_visible.tif"
              chg_path = week_dir / f"{AOI_NAME}_{label}_change.tif"
              if vis_path.exists() and chg_path.exists():
                  print(f"[SKIP] {label} already exists")
                  continue

              prev_label = iso_week_label(wk_start - dt.timedelta(days=7))
              prev_path = OUT_DIR / prev_label / f"{AOI_NAME}_{prev_label}_visible.tif"

              print(f"[PROCESS] {label}")
              vis = build_weekly_visible_cog(wk_start, wk_end, vis_path)
              if vis is None:
                  print(f"[INFO] No imagery for {label}")
                  continue

              if prev_path.exists():
                  chg = build_change_cog(vis_path, prev_path, chg_path)
                  if chg:
                      print(f"[OK] Change COG: {chg}")
              else:
                  print(f"[INFO] No prev week for {label}")

              produced += 1

          print(f"Done. Produced {produced} weeks")
          PYCODE

      - name: Run processor
        run: python scripts/process_weeks.py

      - name: Commit and push new COGs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A cogs || true
          if git diff --cached --quiet; then
            echo "No new COGs"
          else
            git commit -m "Sentinel-2 weekly COGs $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          fi
