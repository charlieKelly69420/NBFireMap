name: Fetch ERD Fires JSON

on:
  workflow_dispatch:
  schedule:
    - cron: "38 * * * *"

permissions:
  contents: write

concurrency:
  group: fetch-erd-fires
  cancel-in-progress: false

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest

    env:
      ACTIVE_URL: "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/0/query?where=1%3D1&outFields=*&returnGeometry=true&f=json"
      OUT_URL:    "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/1/query?where=1%3D1&outFields=*&returnGeometry=true&f=json"
      SUMS_URL:   "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/2/query?where=1%3D1&outFields=*&returnGeometry=true&f=json"

      COPIES_PER_PASS: "10"
      SLEEP_BETWEEN_COPIES_SEC: "8"
      SLEEP_BETWEEN_PASSES_SEC: "60"
      MAX_PASSES: "5"
      CHUNK_SIZE: "1000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch ERD layers with verification and add ERD_FETCH_TIME (IDs-first, attrs-only compare, retry failed)
        id: fetch
        shell: python
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          import os, json, time, hashlib, sys, datetime, requests, copy

          # ---------- config ----------
          targets = {
              "active_fires.json": os.environ["ACTIVE_URL"],
              "out_fires.json":    os.environ["OUT_URL"],
              "sums_table.json":   os.environ["SUMS_URL"],
          }

          COPIES       = int(os.environ.get("COPIES_PER_PASS", "10"))
          SLEEP_COPIES = int(os.environ.get("SLEEP_BETWEEN_COPIES_SEC", "8"))
          SLEEP_PASSES = int(os.environ.get("SLEEP_BETWEEN_PASSES_SEC", "60"))
          MAX_PASSES   = int(os.environ.get("MAX_PASSES", "5"))
          CHUNK_SIZE   = int(os.environ.get("CHUNK_SIZE", "1000"))

          session = requests.Session()
          session.headers.update({
              "User-Agent": "github-actions-fetch-erd/2.0",
              "Cache-Control": "no-cache",
              "Pragma": "no-cache",
          })

          def _layer_base(url):
              """
              Normalize to a deterministic base query:
                <layer>/query?where=1=1&outFields=*
              Ignores any other params from the provided URL.
              """
              if "/query?" in url:
                  base = url.split("/query?")[0]
              else:
                  base = url.rstrip("/")
              return base + "/query?where=1%3D1&outFields=*"

          def _ts():
              return str(int(time.time() * 1000))

          def req(url, timeout=60):
              r = session.get(url + ("&_ts=" + _ts()), timeout=timeout)
              r.raise_for_status()
              return r.json()

          def get_all_ids(base):
              j = req(base + "&returnIdsOnly=true&f=json")
              ids = j.get("objectIds") or []
              ids = [int(x) for x in ids]
              ids.sort()
              cnt = req(base + "&returnCountOnly=true&f=json").get("count", 0)
              return ids, int(cnt)

          def fetch_chunk(base, id_chunk):
              ids_str = ",".join(str(i) for i in id_chunk)  # <-- fixed here
              url = (base
                     + f"&objectIds={ids_str}"
                     + "&orderByFields=OBJECTID"
                     + "&returnGeometry=true"
                     + "&f=json")
              return req(url)

          def fetch_full_ids_first(url):
              """
              Deterministically fetch ALL features for a layer/table using IDs-first.
              Returns the full ESRI JSON (features + metadata) and a meta dict.
              """
              base = _layer_base(url)

              ids, expected_count = get_all_ids(base)
              features = []
              fields = None
              geometryType = None
              spatialReference = None
              objectIdFieldName = None

              for start in range(0, len(ids), CHUNK_SIZE):
                  chunk = ids[start:start+CHUNK_SIZE]
                  j = fetch_chunk(base, chunk)
                  feats = j.get("features") or []
                  features.extend(feats)
                  if fields is None: fields = j.get("fields")
                  if geometryType is None: geometryType = j.get("geometryType")
                  if spatialReference is None: spatialReference = j.get("spatialReference")
                  if objectIdFieldName is None: objectIdFieldName = j.get("objectIdFieldName")

              ok_len = (len(ids) == expected_count == len(features))
              meta = {
                  "ids_len": len(ids),
                  "expected_count": expected_count,
                  "fetched_len": len(features),
                  "ok_len": ok_len,
              }

              esri = {"features": features}
              if fields is not None: esri["fields"] = fields
              if geometryType is not None: esri["geometryType"] = geometryType
              if spatialReference is not None: esri["spatialReference"] = spatialReference
              if objectIdFieldName is not None: esri["objectIdFieldName"] = objectIdFieldName

              return esri, meta

          def extract_attrs(esri_json):
              feats = esri_json.get("features", []) or []
              attrs_list = []
              for f in feats:
                  attrs = (f or {}).get("attributes", {}) or {}
                  attrs_list.append(json.loads(json.dumps(attrs, sort_keys=True)))
              attrs_list_sorted = sorted((json.dumps(a, sort_keys=True) for a in attrs_list))
              digest_src = "[" + ",".join(attrs_list_sorted) + "]"
              digest = hashlib.sha256(digest_src.encode("utf-8")).hexdigest()
              return attrs_list_sorted, digest

          def adorn_fetch_time(esri_json, timestamp_iso):
              esri_json = copy.deepcopy(esri_json)
              fields = esri_json.get("fields", [])
              if not isinstance(fields, list):
                  fields = []
              if not any((f or {}).get("name") == "ERD_FETCH_TIME" for f in fields):
                  fields.append({
                      "name": "ERD_FETCH_TIME",
                      "type": "esriFieldTypeString",
                      "alias": "ERD_FETCH_TIME",
                      "sqlType": "sqlTypeOther",
                      "length": 32,
                      "nullable": True,
                      "editable": False,
                      "domain": None,
                      "defaultValue": None
                  })
              esri_json["fields"] = fields
              for feat in esri_json.get("features", []) or []:
                  attrs = feat.setdefault("attributes", {})
                  attrs["ERD_FETCH_TIME"] = timestamp_iso
              return esri_json

          # Pass-oriented runner: try all, then only retry failed
          remaining = dict(targets)
          results   = {fn: None for fn in targets}

          print(f"\n=== Starting fetch (IDs-first, attributes-only verification across copies) ===", flush=True)
          for attempt in range(1, MAX_PASSES + 1):
              if not remaining:
                  break

              print(f"\n== Pass {attempt}/{MAX_PASSES} – processing {len(remaining)} target(s) ==", flush=True)
              failed_this_pass = {}

              for fname, url in list(remaining.items()):
                  print(f"::group::Processing {fname}")
                  print(f"Fetching {COPIES} full copies via IDs-first…", flush=True)

                  copies = []
                  digests = []
                  attrs_norms = []
                  metas = []

                  for i in range(COPIES):
                      esri, meta = fetch_full_ids_first(url)
                      metas.append(meta)

                      if not meta["ok_len"]:
                          print(f"  Copy {i+1}/{COPIES}: count mismatch "
                                f"(ids={meta['ids_len']}, expected={meta['expected_count']}, fetched={meta['fetched_len']})", flush=True)
                      else:
                          print(f"  Copy {i+1}/{COPIES}: fetched {meta['fetched_len']} features (OK).", flush=True)

                      attrs_norm, digest = extract_attrs(esri)
                      copies.append(esri)
                      attrs_norms.append(attrs_norm)
                      digests.append(digest)
                      print(f"    attrs-digest {digest[:12]}…", flush=True)

                      if i < COPIES - 1:
                          time.sleep(SLEEP_COPIES)

                  first = attrs_norms[0]
                  all_match = all(an == first for an in attrs_norms[1:])
                  counts_all_ok = all(m.get("ok_len") for m in metas)

                  if all_match and counts_all_ok:
                      print(f"✅ Attributes match across {COPIES} copies and counts verified.")
                      ts = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
                      final = adorn_fetch_time(copies[0], ts)
                      with open(fname, "w", encoding="utf-8") as f:
                          json.dump(final, f, ensure_ascii=False, indent=2)
                      print(f"→ Wrote {fname} with ERD_FETCH_TIME={ts}", flush=True)
                      results[fname] = True
                      remaining.pop(fname, None)
                  else:
                      uniq = len(set(digests))
                      print(f"❌ Mismatch detected. Unique attrs digests: {uniq}. "
                            f"Counts all OK? {counts_all_ok}. Will retry if attempts remain.", flush=True)
                      results[fname] = False
                      failed_this_pass[fname] = url
                  print("::endgroup::")

              if failed_this_pass and attempt < MAX_PASSES:
                  print(f"\nSome targets were unstable; retrying them after {SLEEP_PASSES}s…", flush=True)
                  time.sleep(SLEEP_PASSES)
              remaining = failed_this_pass

          # Summary
          print("\n=== SUMMARY ===", flush=True)
          ok_all = True
          lines = []
          for fn in targets:
              status = results.get(fn)
              if status is True:
                  msg = f"{fn}: OK"
              elif status is False:
                  msg = f"{fn}: FAILED"
                  ok_all = False
              else:
                  msg = f"{fn}: SKIPPED?"
                  ok_all = False
              print(" " + msg, flush=True)
              lines.append(f"- {msg}")

          summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
          if summary_path:
              from pathlib import Path
              Path(summary_path).write_text("### ERD Fetch (IDs-first, attributes-only)\n" + "\n".join(lines) + "\n")

          if not ok_all:
              sys.exit(1)

      - name: Commit updated JSONs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(data): update ERD fires JSONs (IDs-first verified copies + ERD_FETCH_TIME)"
          file_pattern: |
            active_fires.json
            out_fires.json
            sums_table.json
