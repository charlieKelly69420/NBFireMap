name: Fetch NB Fire Feeds

on:
  schedule:
    - cron: "2,21 * * * *"   # run ~2 and ~32 past the hour (UTC)
  workflow_dispatch:
permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Fetch and verify feeds (all-or-nothing, up to 5 passes)
        id: fetch
        env:
          BASE: https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer
          QUERY: '?where=1%3D1&outFields=*&f=json'
          TABLE_NAME: SDEOWNER.V_FIRE_DASHBOARD_SUM
        run: |
          set -euo pipefail

          cleanup_prefix() {
            rm -f "$1"0*.json || true
          }

          download_ten() {
            local url="$1" prefix="$2"
            cleanup_prefix "$prefix"
            for i in $(seq -w 01 10); do
              tmpfile="$(mktemp)"
              if ! curl -sS --fail --retry 3 --retry-delay 2 --retry-connrefused --max-time 60 "$url" -o "$tmpfile"; then
                echo "Curl failed for ${url}"
                rm -f "$tmpfile"
                return 1
              fi
              if ! jq -e type "$tmpfile" >/dev/null 2>&1; then
                echo "Invalid JSON for ${url}"
                rm -f "$tmpfile"
                return 1
              fi
              mv "$tmpfile" "${prefix}${i}.json"
              sleep 1
            done
          }

          all_match() {
            local prefix="$1"
            ls ${prefix}*.json >/dev/null 2>&1 || return 1
            local uniq_count
            uniq_count=$(sha256sum ${prefix}*.json | awk '{print $1}' | sort | uniq | wc -l | tr -d ' ')
            test "$uniq_count" -eq 1
          }

          get_table_id() {
            local meta
            if ! meta="$(curl -sS --fail "$BASE?f=pjson")"; then
              echo "Failed to read service metadata"; return 1
            fi
            echo "$meta" | jq -e --arg NAME "$TABLE_NAME" '.tables[] | select(.name==$NAME) | .id' 2>/dev/null | tr -d '\r\n'
          }

          # Resolve table ID once
          TID="$(get_table_id || true)"
          if [ -z "${TID:-}" ]; then
            echo "Could not find table id for $TABLE_NAME in service metadata."
            echo "stable=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          STABLE=false
          for pass in 1 2 3 4 5; do
            echo "::group::Pass $pass"

            ok=true

            echo "Attempt: active fires (layer 0)"
            if download_ten "$BASE/0/query$QUERY" "active_fires"; then
              if all_match "active_fires"; then
                cp -f active_fires01.json active_fires.json
                echo "Active fires stable."
              else
                echo "Active fires NOT stable."
                ok=false
              fi
            else
              echo "Active fires download failed."
              ok=false
            fi
            cleanup_prefix "active_fires"

            echo "Attempt: out fires (layer 1)"
            if download_ten "$BASE/1/query$QUERY" "out_fires"; then
              if all_match "out_fires"; then
                cp -f out_fires01.json out_fires.json
                echo "Out fires stable."
              else
                echo "Out fires NOT stable."
                ok=false
              fi
            else
              echo "Out fires download failed."
              ok=false
            fi
            cleanup_prefix "out_fires"

            echo "Attempt: table $TABLE_NAME (id=$TID)"
            if download_ten "$BASE/$TID/query$QUERY" "v_fire_dashboard_sum"; then
              if all_match "v_fire_dashboard_sum"; then
                cp -f v_fire_dashboard_sum01.json v_fire_dashboard_sum.json
                echo "Table $TABLE_NAME stable."
              else
                echo "Table $TABLE_NAME NOT stable."
                ok=false
              fi
            else
              echo "Table $TABLE_NAME download failed."
              ok=false
            fi
            cleanup_prefix "v_fire_dashboard_sum"

            echo "::endgroup::"

            if [ "$ok" = true ]; then
              STABLE=true
              break
            fi
          done

          echo "stable=$STABLE" >> "$GITHUB_OUTPUT"

      - name: Commit updated JSON (if all stable)
        if: steps.fetch.outputs.stable == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add active_fires.json out_fires.json v_fire_dashboard_sum.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            ts="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git commit -m "Update fire feeds (${ts})"
            git push
          fi
