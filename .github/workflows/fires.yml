name: Fetch ERD Fires GeoJSON

on:
  workflow_dispatch:
  schedule:
    - cron: "38 * * * *"

permissions:
  contents: write

concurrency:
  group: fetch-erd-fires
  cancel-in-progress: false

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest

    env:
      ACTIVE_URL: "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/0/query?where=1%3D1&outFields=*&returnGeometry=true"
      OUT_URL:    "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/1/query?where=1%3D1&outFields=*&returnGeometry=true"
      SUMS_URL:   "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/2/query?where=1%3D1&outFields=*&returnGeometry=true"

      COPIES_PER_PASS: "10"
      SLEEP_BETWEEN_COPIES_SEC: "8"
      SLEEP_BETWEEN_PASSES_SEC: "60"
      MAX_PASSES: "5"
      CHUNK_SIZE: "1000"

      # distance tolerance for point coords (meters)
      TOL_METERS: "10"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch ERD layers (GeoJSON; compare text attrs + coord closeness; retry failed)
        id: fetch
        shell: python
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          import os, json, time, sys, datetime, requests, copy, math
          from pathlib import Path
          from urllib.parse import urlencode

          # ---------- config ----------
          # final outputs end with .geojson so GitHub renders them
          targets = {
              "active_fires.geojson": os.environ["ACTIVE_URL"],
              "out_fires.geojson":    os.environ["OUT_URL"],
              "sums_table.geojson":   os.environ["SUMS_URL"],
          }

          COPIES       = int(os.environ.get("COPIES_PER_PASS", "10"))
          SLEEP_COPIES = int(os.environ.get("SLEEP_BETWEEN_COPIES_SEC", "8"))
          SLEEP_PASSES = int(os.environ.get("SLEEP_BETWEEN_PASSES_SEC", "60"))
          MAX_PASSES   = int(os.environ.get("MAX_PASSES", "5"))
          CHUNK_SIZE   = int(os.environ.get("CHUNK_SIZE", "1000"))
          TOL_METERS   = float(os.environ.get("TOL_METERS", "10"))

          session = requests.Session()
          session.headers.update({
              "User-Agent": "github-actions-fetch-erd/geojson-1.0",
              "Cache-Control": "no-cache",
              "Pragma": "no-cache",
          })

          # ---------- helpers ----------
          def _layer_url(url):
              # "<...>/MapServer/<layer>" without "/query"
              return url.split("/query")[0].rstrip("?&")

          def _base_query(url):
              # deterministic base query for IDs/Count
              if "/query" in url:
                  pre = url.split("/query")[0]
              else:
                  pre = url.rstrip("/")
              return pre + "/query?where=1%3D1&outFields=*"

          def _ts():
              return str(int(time.time() * 1000))

          def req_json(url, timeout=60):
              r = session.get(url + ("&_ts=" + _ts() if "?" in url else "?_ts=" + _ts()), timeout=timeout)
              r.raise_for_status()
              return r.json()

          def layer_info(url):
              # read layer metadata once (fields, geometryType, objectIdField)
              info = req_json(_layer_url(url) + "?f=json")
              fields = info.get("fields") or []
              gtype  = info.get("geometryType")
              oidf   = info.get("objectIdField") or info.get("objectIdFieldName") or "OBJECTID"
              return fields, gtype, oidf

          def get_all_ids(base):
              j = req_json(base + "&returnIdsOnly=true&f=json")
              ids = j.get("objectIds") or []
              ids = [int(x) for x in ids]
              ids.sort()
              cnt = req_json(base + "&returnCountOnly=true&f=json").get("count", 0)
              return ids, int(cnt)

          def fetch_chunk_geojson(base, id_chunk):
              # Ask ArcGIS for GeoJSON directly; it returns WGS84 lon/lat
              qs = "&" + urlencode({
                  "objectIds": ",".join(str(i) for i in id_chunk),
                  "orderByFields": "OBJECTID",
                  "returnGeometry": "true",
                  "f": "geojson",
              })
              return req_json(base + qs)

          def fetch_full_geojson(url):
              """
              Deterministic all-rows fetch:
                - read schema (f=json, once)
                - get IDs (returnIdsOnly)
                - chunk features as GeoJSON (f=geojson)
              Returns (feature_collection, meta, schema)
              """
              fields, gtype, oidf = layer_info(url)
              base = _base_query(url)
              ids, expected_count = get_all_ids(base)

              features = []
              for start in range(0, len(ids), CHUNK_SIZE):
                  chunk = ids[start:start+CHUNK_SIZE]
                  gj = fetch_chunk_geojson(base, chunk)
                  feats = gj.get("features") or []
                  features.extend(feats)

              fc = {
                  "type": "FeatureCollection",
                  "features": features,
              }
              meta = {
                  "ids_len": len(ids),
                  "expected_count": expected_count,
                  "fetched_len": len(features),
                  "ok_len": (len(ids) == expected_count == len(features)),
              }
              schema = {"fields": fields, "geometryType": gtype, "oid_field": oidf}
              return fc, meta, schema

          def stamp_fetch_time(fc, ts_iso):
              out = copy.deepcopy(fc)
              for feat in out.get("features", []):
                  props = feat.setdefault("properties", {})
                  props["ERD_FETCH_TIME"] = ts_iso
              return out

          # ---- comparison helpers (string props + point closeness) ----
          def string_field_names(fields):
              names = []
              for f in (fields or []):
                  if (f or {}).get("type") == "esriFieldTypeString":
                      n = (f.get("name") or "").strip()
                      if n and n != "ERD_FETCH_TIME":
                          names.append(n)
              return names

          def features_by_oid_geojson(fc, oid_field):
              m = {}
              for feat in fc.get("features", []) or []:
                  props = (feat or {}).get("properties") or {}
                  oid = props.get(oid_field)
                  if oid is not None:
                      try:
                          m[int(oid)] = feat
                      except Exception:
                          m[str(oid)] = feat
              return m

          def haversine_m(lon1, lat1, lon2, lat2):
              R = 6371000.0
              dlat = math.radians(lat2 - lat1)
              dlon = math.radians(lon2 - lon1)
              a = math.sin(dlat/2)**2 + math.cos(math.radians(lat1))*math.cos(math.radians(lat2))*math.sin(dlon/2)**2
              c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
              return R * c

          def point_dist_m(geom1, geom2):
              if not geom1 or not geom2:
                  return float("inf")
              if geom1.get("type") != "Point" or geom2.get("type") != "Point":
                  return 0.0  # we only enforce for points; others considered OK
              coords1 = geom1.get("coordinates") or []
              coords2 = geom2.get("coordinates") or []
              if len(coords1) < 2 or len(coords2) < 2:
                  return float("inf")
              lon1, lat1 = float(coords1[0]), float(coords1[1])
              lon2, lat2 = float(coords2[0]), float(coords2[1])
              return haversine_m(lon1, lat1, lon2, lat2)

          def copies_match_text_and_coords_geojson(copies, schema):
              if not copies:
                  return False, {"reason": "no copies"}

              fields = schema.get("fields") or []
              gtype  = schema.get("geometryType")
              oidf   = schema.get("oid_field") or "OBJECTID"
              sfields = string_field_names(fields)

              maps = [features_by_oid_geojson(c, oidf) for c in copies]

              # same OID sets
              base_oids = set(maps[0].keys())
              for i, m in enumerate(maps[1:], start=2):
                  if set(m.keys()) != base_oids:
                      return False, {"reason": f"OID set mismatch at copy {i}"}

              # per-oid checks (strings + point coords closeness)
              for oid in sorted(base_oids):
                  base_feat = maps[0][oid]
                  base_props = base_feat.get("properties") or {}
                  for i, m in enumerate(maps[1:], start=2):
                      feat = m[oid]
                      props = feat.get("properties") or {}
                      # string props equal
                      for fn in sfields:
                          if str(base_props.get(fn)) != str(props.get(fn)):
                              return False, {"reason": "text attr mismatch", "oid": oid, "field": fn, "copy": i}
                      # coordinates closeness only for points
                      if gtype == "esriGeometryPoint":
                          d = point_dist_m(base_feat.get("geometry"), feat.get("geometry"))
                          if not (d == d) or d > TOL_METERS:
                              return False, {"reason": "geom too far", "oid": oid, "copy": i, "distance_m": d}
              return True, {"reason": "all good"}

          # ---------- main driver ----------
          remaining = dict(targets)
          results   = {fn: None for fn in targets}

          print(f"\n=== Starting fetch (GeoJSON; verify text attrs + coordinate closeness) ===", flush=True)
          for attempt in range(1, MAX_PASSES + 1):
              if not remaining:
                  break

              print(f"\n== Pass {attempt}/{MAX_PASSES} – processing {len(remaining)} target(s) ==", flush=True)
              failed_this_pass = {}

              for fname, url in list(remaining.items()):
                  print(f"::group::Processing {fname}")

                  copies = []
                  metas  = []

                  for i in range(COPIES):
                      fc, meta, schema = fetch_full_geojson(url)
                      copies.append(fc)
                      metas.append(meta)
                      print(f"  Copy {i+1}/{COPIES}: fetched={meta['fetched_len']}, expected={meta['expected_count']}, ids={meta['ids_len']}, counts_ok={meta['ok_len']}", flush=True)
                      if i < COPIES - 1:
                          time.sleep(SLEEP_COPIES)

                  counts_ok = all(m.get("ok_len") for m in metas)
                  if not counts_ok:
                      print("  ✖ Count mismatch across copies — will retry.", flush=True)
                      results[fname] = False
                      failed_this_pass[fname] = url
                      print("::endgroup::")
                      continue

                  match, report = copies_match_text_and_coords_geojson(copies, schema)
                  if match:
                      print("  ✅ Text attributes match and coordinates are within tolerance across copies.", flush=True)
                      ts = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
                      final = stamp_fetch_time(copies[0], ts)
                      with open(fname, "w", encoding="utf-8") as f:
                          json.dump(final, f, ensure_ascii=False, indent=2)
                      print(f"  → Wrote {fname} with ERD_FETCH_TIME={ts}", flush=True)
                      results[fname] = True
                  else:
                      print(f"  ✖ Verification failed: {report}", flush=True)
                      results[fname] = False
                      failed_this_pass[fname] = url

                  print("::endgroup::")

              if failed_this_pass and attempt < MAX_PASSES:
                  print(f"\nSome targets failed verification; retrying them after {SLEEP_PASSES}s…", flush=True)
                  time.sleep(SLEEP_PASSES)

              remaining = failed_this_pass

          # ---------- summary ----------
          print("\n=== SUMMARY ===", flush=True)
          ok_all = True
          lines = []
          for fn in targets:
              status = results.get(fn)
              if status is True:
                  msg = f"{fn}: OK"
              elif status is False:
                  msg = f"{fn}: FAILED"
                  ok_all = False
              else:
                  msg = f"{fn}: SKIPPED?"
                  ok_all = False
              print(" " + msg, flush=True)
              lines.append(f"- {msg}")

          summary_path = os.environ.get("GITHUB_STEP_SUMMARY")
          if summary_path:
              Path(summary_path).write_text(
                  "### ERD Fetch (GeoJSON; text-attrs + coord closeness)\n"
                  f"- Tolerance: {TOL_METERS} m\n"
                  + "\n".join(lines) + "\n"
              )

          if not ok_all:
              sys.exit(1)

      - name: Commit updated GeoJSONs
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(data): update ERD fires GeoJSONs (text-attrs + coord closeness verified)"
          file_pattern: |
            active_fires.geojson
            out_fires.geojson
            sums_table.geojson
