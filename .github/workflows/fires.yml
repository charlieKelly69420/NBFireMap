name: Fetch ERD Fire Datasets

on:
  schedule:
    # Runs at 21 minutes after every hour (UTC)
    - cron: "21 * * * *"
  workflow_dispatch: {}

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: "1"

      # --- ERD (ArcGIS) ---
      ACTIVE_FIRES_URL: "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/0/query"
      OUT_FIRES_URL: "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/1/query"
      SUMS_TABLE_URL: "https://gis-erd-der.gnb.ca/arcgis/rest/services/Fire_Dashboards/Public_Fires/MapServer/2/query"
      ACTIVE_FIRES_FILE: "active_fires.geojson"
      OUT_FIRES_FILE: "out_fires.geojson"
      SUMS_TABLE_FILE: "sums_table.json"

      # --- CWFIS (Geoserver WFS) ---
      CWFIS_WFS_ENDPOINT: "https://cwfis.cfs.nrcan.gc.ca/geoserver/public/ows"
      CWFIS_HOTSPOTS_TYPENAME_24H: "public:hotspots_last24hrs"
      CWFIS_HOTSPOTS_24_FILE: "hotspots_last24hrs.geojson"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch ERD layers, validate, and write files
        shell: bash
        run: |
          set -euo pipefail
          python -u - << 'PYCODE'
          import os, time, json, hashlib
          import requests

          SESSION = requests.Session()
          SESSION.headers.update({"User-Agent": "github-actions ERD fetcher"})

          def log(msg):
              ts = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
              print(f"[{ts} UTC] {msg}", flush=True)

          def arcgis_get(url, params, *, attempts=3, timeout=60):
              for attempt in range(1, attempts + 1):
                  try:
                      r = SESSION.get(url, params=params, timeout=timeout)
                      if r.status_code == 200:
                          return r
                      log(f"HTTP {r.status_code} from {url} (attempt {attempt})")
                  except Exception as e:
                      log(f"Request error (attempt {attempt}): {e}")
                  time.sleep(1)
              raise RuntimeError(f"Failed after {attempts} attempts: {url}")

          # ---------- Schema helpers ----------
          def fetch_layer_meta(url):
              """Fetch layer metadata (fields, objectIdField, maxRecordCount, etc.)."""
              meta_url = url.rsplit("/query", 1)[0]
              r = arcgis_get(meta_url, {"f": "json"})
              meta = r.json()
              if not isinstance(meta, dict):
                  raise RuntimeError("Layer metadata not a dict")
              return meta

          def get_oid_field(meta):
              if isinstance(meta.get("objectIdField"), str):
                  return meta["objectIdField"]
              for f in meta.get("fields", []):
                  if f.get("type") == "esriFieldTypeOID":
                      return f.get("name")
              for cand in ("OBJECTID","ObjectID","objectid"):
                  if any(cand == f.get("name") for f in meta.get("fields", [])):
                      return cand
              return "OBJECTID"

          def get_all_field_names(meta):
              return [f["name"] for f in meta.get("fields", []) if "name" in f]

          # ---------- Signatures for stability ----------
          def features_to_signature(feature_collection):
              feats = feature_collection.get("features", [])
              def feature_key(f):
                  props = f.get("properties", {}) or {}
                  for key in ("OBJECTID","ObjectID","objectid"):
                      if key in props:
                          return (0, props[key])
                  # fallback to Feature.id
                  if "id" in f:
                      return (0, f["id"])
                  return (1, hashlib.sha256(json.dumps(props, sort_keys=True, ensure_ascii=False).encode("utf-8")).hexdigest())
              norm = []
              for f in feats:
                  props = f.get("properties", {}) or {}
                  strings = []
                  for _, v in sorted(props.items()):
                      if isinstance(v, str):
                          strings.append(v)
                  norm.append(("".join(strings), feature_key(f)))
              norm.sort(key=lambda t: t[1])
              concat = "|".join(s for s, _ in norm)
              return len(feats), hashlib.sha256(concat.encode("utf-8")).hexdigest()

          def table_to_signature(table_json):
              feats = table_json.get("features", [])
              rows = []
              for f in feats:
                  attrs = f.get("attributes", {}) or {}
                  strings = []
                  for _, v in sorted(attrs.items()):
                      if isinstance(v, str):
                          strings.append(v)
                  rows.append("".join(strings))
              rows.sort()
              concat = "|".join(rows)
              return len(feats), hashlib.sha256(concat.encode("utf-8")).hexdigest()

          # ---------- Fetchers ----------
          def fetch_geojson(url):
              """Get ArcGIS-provided GeoJSON for geometry; attributes may be partial."""
              params = {
                  "where": "1=1",
                  "outFields": "*",
                  "outSR": "4326",
                  "returnGeometry": "true",
                  "f": "geojson",
              }
              r = arcgis_get(url, params)
              data = r.json()
              if isinstance(data, dict) and data.get("error"):
                  raise RuntimeError(f"ArcGIS error (geojson): {data['error']}")
              if data.get("type") != "FeatureCollection":
                  raise RuntimeError("GeoJSON did not contain a FeatureCollection")
              return data

          def fetch_attributes(url):
              """Get full attributes via f=json (no geometry)."""
              params = {
                  "where": "1=1",
                  "outFields": "*",
                  "returnGeometry": "false",
                  "f": "json",
              }
              r = arcgis_get(url, params)
              data = r.json()
              if isinstance(data, dict) and data.get("error"):
                  raise RuntimeError(f"ArcGIS error (json attrs): {data['error']}")
              return data

          def attributes_index_by_oid(attrs_json, oid_field):
              index = {}
              for f in attrs_json.get("features", []):
                  attrs = f.get("attributes") or {}
                  if oid_field in attrs:
                      index[attrs[oid_field]] = attrs
              return index

          # ---------- Merge (FIXED: safe OID join, no blanket None fills) ----------
          def merge_geojson_with_attrs(geojson_obj, attrs_by_oid, all_fields, oid_field):
              for f in geojson_obj.get("features", []):
                  props = f.get("properties")
                  if not isinstance(props, dict):
                      props = {}
                      f["properties"] = props
                  # Try several ways to locate the join key
                  oid_val = (
                      props.get(oid_field)
                      or props.get(oid_field.upper())
                      or props.get(oid_field.lower())
                      or f.get("id")  # ArcGIS GeoJSON often places OBJECTID here
                  )
                  source = attrs_by_oid.get(oid_val)
                  if not source:
                      # No match -> leave existing props as-is
                      continue
                  # Copy only missing keys from source (avoid overwriting existing values)
                  for name in all_fields:
                      if name not in props and name in source:
                          props[name] = source[name]
              return geojson_obj

          def add_timestamp_to_geojson(data, timestamp):
              for f in data.get("features", []):
                  props = f.get("properties")
                  if not isinstance(props, dict):
                      props = {}
                      f["properties"] = props
                  props["FETCHED_FROM_ERD"] = int(timestamp)
              return data

          def add_timestamp_to_table(data, timestamp):
              for f in data.get("features", []):
                  attrs = f.get("attributes")
                  if not isinstance(attrs, dict):
                      attrs = {}
                      f["attributes"] = attrs
                  attrs["FETCHED_FROM_ERD"] = int(timestamp)
              return data

          # ---------- Orchestrated fetch with stability check ----------
          def attempt_fetch_geojson_with_full_attrs(kind, url, outfile, max_attempts=5, copies=4):
              meta = fetch_layer_meta(url)
              oid_field = get_oid_field(meta)
              all_fields = get_all_field_names(meta)
              log(f"{kind}: OID field='{oid_field}', fields={len(all_fields)}")

              for attempt in range(1, max_attempts + 1):
                  log(f"=== {kind}: attempt {attempt}/{max_attempts} ===")
                  payloads = []
                  sigs = []
                  for i in range(copies):
                      base_geo = fetch_geojson(url)                     # geometry + some attrs (may omit OID)
                      attrs_json_resp = fetch_attributes(url)           # full attrs only
                      attrs_by_oid = attributes_index_by_oid(attrs_json_resp, oid_field)

                      merged = merge_geojson_with_attrs(base_geo, attrs_by_oid, all_fields, oid_field)
                      count, sig = features_to_signature(merged)
                      payloads.append(merged)
                      sigs.append((count, sig))
                      log(f"{kind}: copy {i+1}/{copies} -> features={count} sig={sig[:12]}")
                      time.sleep(1)

                  ok = all(sigs[0] == s for s in sigs[1:])
                  if not ok:
                      log(f"{kind}: copies mismatch on attempt {attempt}; retrying …")
                      continue

                  ts = int(time.time())
                  final = add_timestamp_to_geojson(payloads[0], ts)
                  with open(outfile, "w", encoding="utf-8") as f:
                      json.dump(final, f, ensure_ascii=False, indent=2)
                  log(f"{kind}: wrote {outfile} (features={sigs[0][0]})")
                  return True

              log(f"{kind}: FAILED after {max_attempts} attempts")
              return False

          def attempt_fetch_table_json(kind, url, outfile, max_attempts=5, copies=4):
              for attempt in range(1, max_attempts + 1):
                  log(f"=== {kind}: attempt {attempt}/{max_attempts} ===")
                  payloads = []
                  sigs = []
                  for i in range(copies):
                      params = {
                          "where": "1=1",
                          "outFields": "*",
                          "returnGeometry": "false",
                          "f": "json"
                      }
                      r = arcgis_get(url, params)
                      data = r.json()
                      if isinstance(data, dict) and data.get("error"):
                          raise RuntimeError(f"ArcGIS error for {kind}: {data['error']}")
                      payloads.append(data)
                      count, sig = table_to_signature(data)
                      sigs.append((count, sig))
                      log(f"{kind}: copy {i+1}/{copies} -> rows={count} sig={sig[:12]}")
                      time.sleep(1)

                  ok = all(sigs[0] == s for s in sigs[1:])
                  if not ok:
                      log(f"{kind}: copies mismatch on attempt {attempt}; retrying …")
                      continue

                  ts = int(time.time())
                  final = add_timestamp_to_table(payloads[0], ts)
                  with open(outfile, "w", encoding="utf-8") as f:
                      json.dump(final, f, ensure_ascii=False, indent=2)
                  log(f"{kind}: wrote {outfile} (rows={sigs[0][0]})")
                  return True

              log(f"{kind}: FAILED after {max_attempts} attempts")
              return False

          # ---------- Run all three ----------
          success_all = True
          success_all &= attempt_fetch_geojson_with_full_attrs(
              kind="active_fires (layer 0)",
              url=os.environ["ACTIVE_FIRES_URL"],
              outfile=os.environ["ACTIVE_FIRES_FILE"]
          )
          success_all &= attempt_fetch_geojson_with_full_attrs(
              kind="out_fires (layer 1)",
              url=os.environ["OUT_FIRES_URL"],
              outfile=os.environ["OUT_FIRES_FILE"]
          )
          success_all &= attempt_fetch_table_json(
              kind="sums_table (layer 2)",
              url=os.environ["SUMS_TABLE_URL"],
              outfile=os.environ["SUMS_TABLE_FILE"]
          )

          if not success_all:
              log("One or more ERD datasets failed to stabilize; commit will include only successful files (if any).")
          else:
              log("All ERD datasets fetched and validated successfully.")
          PYCODE

      - name: Fetch CWFIS hotspots (WFS, last 24 hours)
        shell: bash
        run: |
          set -euo pipefail
          python -u - << 'PY'
          import os, json, time, requests

          S = requests.Session()
          S.headers.update({"User-Agent":"github-actions cwfis fetcher"})

          params = {
            "service":"WFS",
            "version":"1.0.0",
            "request":"GetFeature",
            "typeName": os.environ["CWFIS_HOTSPOTS_TYPENAME_24H"],
            "maxFeatures":"100000",
            "outputFormat":"application/json"
          }

          r = S.get(os.environ["CWFIS_WFS_ENDPOINT"], params=params, timeout=120)
          r.raise_for_status()
          data = r.json()
          ts = int(time.time())
          for f in data.get("features", []):
              props = f.get("properties")
              if not isinstance(props, dict):
                  props = {}
                  f["properties"] = props
              props["FETCHED_FROM_CWFIS"] = ts

          with open(os.environ["CWFIS_HOTSPOTS_24_FILE"], "w", encoding="utf-8") as f:
              json.dump(data, f, ensure_ascii=False, indent=2)

          print(f"Wrote {os.environ['CWFIS_HOTSPOTS_24_FILE']} with {len(data.get('features',[]))} features.")
          PY

      - name: Commit and push (if changed)
        shell: bash
        run: |
          set -euo pipefail
          git status --porcelain
          CHANGED="$(git status --porcelain)"
          if [ -n "$CHANGED" ]; then
            echo "Changes detected; committing…"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add "${ACTIVE_FIRES_FILE}" "${OUT_FIRES_FILE}" "${SUMS_TABLE_FILE}" "${CWFIS_HOTSPOTS_24_FILE}" || true
            git commit -m "Update ERD & CWFIS fire datasets" -m "Run: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
            echo "Pushed updates."
          else
            echo "No changes to commit."
          fi
